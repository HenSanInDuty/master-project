import json
import os
import time
import traceback
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
import streamlit as st
import google.generativeai as genai
from tqdm import tqdm

st.title("Ph√¢n t√≠ch d·ªØ li·ªáu")
# Kh·ªüi t·∫°o c√°c bi·∫øn session 
# data_input gi·ªØ l·∫°i gi√° tr·ªã trong khi ƒë√°nh nh√£n
if 'data_input' not in st.session_state:
    st.session_state.data_input = None

# progress_num l√† d√πng ƒë·ªÉ ƒëi ƒë·∫øn d√≤ng ti·∫øp theo trong t√≠nh nƒÉng ƒë√°nh nh√£n
if 'progress_num' not in st.session_state:
    st.session_state.progress_num = 0

# btn_label_activation l√† d√πng ƒë·ªÉ disable input "Nh·∫≠p nh·ªØng c·ªôt b·∫°n mu·ªën ƒë√°nh nh√£n" sau khi nh·∫≠p
if 'btn_label_activation' not in st.session_state:
    st.session_state.btn_label_activation = False

# Check xem th·ª≠ n√∫t "B·∫Øt ƒë·∫ßu ƒë√°nh nh√£n" c√≥ click hay ch∆∞a
if 'clicked_labeld_btn' not in st.session_state:
    st.session_state.clicked_labeld_btn = 0

def clicked_labeld_btn():
    st.session_state.progress_num = 0
    st.session_state.clicked_labeld_btn = 1
    
# L·∫•y th√¥ng tin c·ªßa th∆∞ m·ª•c d·ª± √°n g·ªëc
working_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

features = ["Th·ªëng k√™", "ƒê√°nh nh√£n"]
choiced_feature = st.selectbox("Ch·ªçn ch·ª©c nƒÉng", features, index = None)

if choiced_feature == features[0]:
    folder_data_path = f"{working_dir}\\data\\processed"

    # Li·ªát k√™ c√°c t·∫≠p tin trong th∆∞ m·ª•c
    files = [f for f in os.listdir(folder_data_path) if f.endswith(".csv")]

    selected_file = st.selectbox("Select a file", files, index=None)

    if selected_file: 
        file_path = os.path.join(folder_data_path, selected_file)
        # ƒë·ªçc file
        df = pd.read_csv(file_path)
        
        col1, col2 = st.columns(2)
        
        columns = df.columns.tolist()
        
        with col1:
            st.write("")
            st.write(df.head())
            
        with col2:
            
            plot_list = ["Distribution", "Pie"]
            
            selected_plot = st.selectbox("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì", options=plot_list, index=None)
            
            x_axis = st.selectbox("Ch·ªçn chi·ªÅu X", options=columns + ["None"])
        
            st.write("L·ª±a ch·ªçn c·ªßa b·∫°n bao g·ªìm")
            selected_cl1, selected_cl2 = st.columns(2)
            
            with selected_cl1:
                st.write(f"Bi·ªÉu ƒë·ªì: {selected_plot}")
            
            with selected_cl2:
                st.write(f"C·ªôt d·ªØ li·ªáu l√†: {x_axis}")
            
        # N·∫øu bi·ªÉu ƒë·ªì l√† Histogram
        if selected_plot == plot_list[0]:
            if st.button("T·∫°o bi·ªÉu ƒë·ªì"):
                n_bins = 10
                fig, ax = plt.subplots()
                df[x_axis].plot(kind='hist', bins=n_bins, density=True, color='#6cc7c9')
                df[x_axis].plot(kind='kde', color='#dc8b8c')
                ax.set_xlabel(x_axis)
                ax.set_ylabel('Frequency')
                ax.set_title(f'Histograms for {x_axis}')
                ax.set_xlim(0,10)

                # T√≠nh c√°c s·ªë ph√¢n v·ªã
                quant_25, quant_50, quant_75 = df[x_axis].quantile(0.25), df[x_axis].quantile(0.5), df[x_axis].quantile(0.75)
                
                distribution_col1, distribution_col2 = st.columns(2)
                
                with distribution_col1:
                    st.pyplot(plt.gcf())
                    
                with distribution_col2:
                    st.text(f"Ph√¢n v·ªã 1: {quant_25}")
                    st.text(f"Ph√¢n v·ªã 2: {quant_50}")
                    st.text(f"Ph√¢n v·ªã 3: {quant_75}")

        # N·∫øu bi·ªÉu ƒë·ªì l√† bi·ªÉu ƒë·ªì tr√≤n
        elif selected_plot == plot_list[1]:
            # H√†m hi·ªán bi·ªÉu ƒë·ªì tr√≤n
            def pie_chart_show(count, label, title="", print_summary = False):
                # ƒê·ªïi l·∫°i th√†nh ki·ªÉu list h·∫øt
                count = list(count)
                label = list(label)
                
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n
                colors = ['#dc8b8c', '#d14e5f', '#831a3d', '#fff28b', '#f7c962', '#f7963e', '#65e0a8', '#448c6d', '#095071', '#42add5', '#6cc7c9']
                colors.reverse()
                fig, ax = plt.subplots()
                ax.pie(count, 
                    labels=label, 
                    radius=1, 
                    wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'white' },
                    colors = colors)
                ax.set_title(f"Pie chart for {title}")
                # Chia ra 2 c·ªôt, c·ªôt tr√°i l√† h√¨nh, c·ªôt ph·∫£i l√† th·ªëng k√™
                col1, col2 = st.columns(2)
                
                with col1:
                    # Hi·ªÉn th·ªã ra m√†n h√¨nh
                    st.pyplot(plt.gcf())
                    
                with col2:
                    # Th·ªëng k√™ theo s·ªë li·ªáu
                    total_posting = sum(count)
                    for i in range(len(label)):
                        st.write(f'{label[i]}: {count[i]} ({round((count[i] * 100)/total_posting, 2)}%)')
                        
            # H√†m x·ª≠ l√Ω t√≠nh to√°n s·ªë l∆∞·ª£ng gi√° tr·ªã v√† t√™n
            def calculate_label_and_count(df_columns, top, delimeter = ','):
                # V√¨ 1 b√†i ƒëƒÉng s·∫Ω c√≥ nhi·ªÅu ng√¥n ng·ªØ n√™n c·∫ßn ph·∫£i x·ª≠ l√Ω m·ªôt ch√∫t
                columns_lc = {}
                for column in df_columns:
                    if not pd.isna(column):
                        # M·ªói ng√¥n ng·ªØ ƒë∆∞·ª£c c√°ch nhau b·ªüi delemeter
                        split_language = column.split(delimeter)
                        
                        for sl in split_language:
                            if sl in columns_lc.keys():
                                columns_lc[f'{sl}'] += 1
                            else:
                                columns_lc[f'{sl}'] = 1

                columns_lc = sorted(columns_lc.items(), key=lambda x:x[1], reverse=True)

                count = []
                label = []

                for i in range(top):
                    count.append(columns_lc[i][1])
                    label.append(columns_lc[i][0])

                # Th√™m ph·∫ßn nh·ªØng ng√¥n ng·ªØ kh√°c sau top 10
                count.append(0)
                label.append('Other')

                for i in range(top, len(columns_lc)):
                    count[top] += columns_lc[i][1]
                    
                return label,count
            
            # X·ª≠ l√Ω ·ªü tr√™n m√†n h√¨nh
            top = st.number_input("Ch·ªçn top k gi√° tr·ªã ƒë·ªÉ th·ª±c hi·ªán v·∫Ω bi·ªÉu ƒë·ªì", min_value=1, max_value=11)
            
            if st.button("T·∫°o bi·ªÉu ƒë·ªì"):
                # L·∫•y ra s·ªë l∆∞·ª£ng ng√¥n ng·ªØ v√† t·ªïng c·ªßa ch√∫ng
                label, count = calculate_label_and_count(df[f'{x_axis}'], top)

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n
                pie_chart_show(count, label,title = x_axis, print_summary = True)
        
            
elif choiced_feature == features[1]:
    folder_data_path = f"{working_dir}\\data\\raw"

    # Li·ªát k√™ c√°c t·∫≠p tin trong th∆∞ m·ª•c
    files = [f for f in os.listdir(folder_data_path) if f.endswith(".csv")]

    selected_file = st.selectbox("Select a file", files, index=None)

    if selected_file: 
        file_path = os.path.join(folder_data_path, selected_file)
        # ƒë·ªçc file
        df = pd.read_csv(file_path)
        st.write("B·∫°n mu·ªën nh·∫≠p th√™m nh·ªØng c·ªôt n√†o?")
        st.write("L∆∞u √Ω: Vui l√≤ng nh·∫≠p v√† ngƒÉn c√°ch m·ªói c·ªôt b·∫±ng d·∫•u ph·∫©y v√† c·ªôt kh√¥ng ƒë∆∞·ª£c c√≥ kho·∫£ng tr·ªëng")
        
        need_labels = st.text_input("Nh·∫≠p nh·ªØng c·ªôt b·∫°n mu·ªën ƒë√°nh nh√£n")
        file_process_name = st.text_input("Nh·∫≠p t√™n file b·∫°n mu·ªën tr·∫£ v·ªÅ")
        
        method_label = st.selectbox("B·∫°n mu·ªën d√πng ph∆∞∆°ng ph√°p ƒë√°nh nh√£n n√†o?", ["ƒê√°nh b·∫±ng s·ª©c ng∆∞·ªùi", "Gemini"], index=None)
        
        
        if method_label == "ƒê√°nh b·∫±ng s·ª©c ng∆∞·ªùi":
            st.button("B·∫Øt ƒë·∫ßu ƒë√°nh nh√£n", on_click=clicked_labeld_btn)
            # T√°ch c·ªôt nh√£n theo d·∫•u ,
            need_labels = need_labels.split(",")
            
            # Kh·ªüi t·∫°o data input ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu 
            if st.session_state.data_input == None:
                st.session_state.data_input = [['' for _ in range(len(df))] for _ in range(len(need_labels))]
            
            if st.session_state.clicked_labeld_btn == 1:
                st.session_state.btn_label_activation = True
                
                # S·ªë l∆∞·ª£ng ƒë√°nh nh√£n
                col1, col2 = st.columns(2)
                with col1:
                    if st.session_state.progress_num < len(df):
                        st.write(f"D·ªØ li·ªáu th·ª© {st.session_state.progress_num + 1}/{len(df)}")
                    else:
                        st.write(f"Finish")
                with col2:
                    progress = st.progress(st.session_state.progress_num / len(df))
                
                # Ch∆∞∆°ng tr√¨nh ch√≠nh
                main_col1, main_col2 = st.columns([3,1])
                with main_col1:
                    # L·∫•y ra d√≤ng d·ªØ li·ªáu
                    if st.session_state.progress_num < len(df):
                        data = df[st.session_state.progress_num:st.session_state.progress_num + 1]
                        
                        # In ra d·ªØ li·ªáu c·ªßa c√°c c·ªôt
                        st.markdown(f"üë§**JOB_ID:** {data['job_id'].iloc[0]}")
                        st.markdown(f"üìå**JOB_TITLE:** {data['job_title'].iloc[0]}")
                        st.markdown(f"üîñ**JOB_TAG:** {data['job_tags'].iloc[0]}")
                        st.markdown(f"üìù**JOB_REQUEST:**")
                        st.write(data['requests'].iloc[0])
                    
                with main_col2:
                    # Kh·ªüi t·∫°o data input ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu v√† text input c·ªßa streamlit
                    text_input = [None for _ in range(len(need_labels))]
                    
                    for i in range(len(need_labels)):
                        need_label = need_labels[i].strip()
                        text_input[i] = st.text_input(need_label, key=f"need_label_{i}")
                        
                    if st.session_state.progress_num < len(df):
                        def next_row():
                            st.session_state.progress_num+=1
                            
                        if st.button("Next Row", on_click=next_row):
                            for i in range(len(need_labels)):
                                st.session_state.data_input[i][st.session_state.progress_num - 1] = text_input[i]
                    else:
                        for i in range(len(need_labels)):
                            st.session_state.data_input[i][st.session_state.progress_num - 1] = text_input[i]
                        # N·∫øu m√† ƒë√°nh t·ªõi cu·ªëi file th√¨ d·ª´ng v√† l∆∞u l·∫°i
                        new_column = {}
                        for i in range(len(need_labels)):
                            new_column[f'{need_labels[i]}'] = st.session_state.data_input[i]
                            
                        df = df.assign(**new_column)
                        df.to_csv(f"{working_dir}\\data\\processed\\{file_process_name}.csv")
                        
                        def change_finish_state():
                            st.session_state.clicked_labeld_btn = 2
                        st.button("Ho√†n th√†nh", on_click=change_finish_state)                
        elif method_label == "Gemini":
            # Test api key: AIzaSyAVZj--laOiadY9F8H_vFB-LWCRw8lUmyQ 
            gemini_key = st.text_input("ƒêi·ªÅn gemini key api: ", value="AIzaSyAVZj--laOiadY9F8H_vFB-LWCRw8lUmyQ ")
            prompt = '''tr√≠ch xu·∫•t s·ªë nƒÉm kinh nghi·ªám, ng√¥n ng·ªØ l·∫≠p tr√¨nh, framework (n·∫øu c√≥), c√¥ng ngh·ªá ch√≠nh (nh∆∞ l·∫≠p tr√¨nh web hay l√† ai ch·∫≥ng h·∫°n), k·ªπ nƒÉng m·ªÅm v√† nh·ªØng c√¥ng c·ª• s·ª≠ d·ª•ng sang json v·ªõi c·∫•u tr√∫c t∆∞∆°ng t·ª±:
                {
                "experience": "int",
                "industries":[industries1, industries2],
                "languages":[language1, language2],
                "soft-skill":[soft-skill1, soft-skill2],
                "framework":[framework1, framework2],
                "tools":[tool1, tool2]
                }
                Trong ƒë√≥:
                experience: l√† s·ªë nƒÉm kinh nghi·ªám, l·∫•y gi√° tr·ªã nh·ªè nh·∫•t n·∫øu c√≥ nhi·ªÅu gi√° tr·ªã, n·∫øu kh√¥ng c√≥ gi√° tr·ªã n√†o th√¨ tr·∫£ v·ªÅ s·ªë 0, kh√¥ng c·∫ßn ph·∫£i ghi ti√™u ƒë·ªÅ hay c√¥ng ngh·ªá. ch·ªâ l√† m·ªôt m·∫£ng s·ªë, kh√¥ng ph·∫£i object
                industries: l√† c√°c c√¥ng ngh·ªá nh∆∞ l·∫≠p tr√¨nh ·ª©ng d·ª•ng web, l·∫≠p tr√¨nh ai,...
                languages: l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh
                soft-skill: k·ªπ nƒÉng m·ªÅm nh∆∞ th√≠ch ·ª©ng nhanh, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ,...
                framework: l√† nh·ªØng framework l·∫≠p tr√¨nh nh∆∞ react, spring boot. N·∫øu kh√¥ng ƒë·ªÅ c·∫≠p t·ªõi trong c√¢u th√¨ ƒë·ªÉ tr·ªëng b·∫±ng m·ªôt chu·ªói r·ªóng, tuy·ªát ƒë·ªëi kh√¥ng t·ª± sinh ra b·∫±ng c√°ch d·ª±a v√†o ng√¥n ng·ªØ l·∫≠p tr√¨nh
                tools: nh·ªØng tool nh∆∞ AWS, git, gitlab,...
                Kh√¥ng c√≥ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ trong m·∫£ng v√† ch·ªâ s·ª≠ d·ª•ng th√¥ng tin trong c√¢u, kh√¥ng th√™m v√†o
                N·∫øu c√≥ ti·∫øng Anh th√¨ d·ªãch sang ti·∫øng Vi·ªát
                Tr·∫£ v·ªÅ json kh√¥ng c√≥ ```json ·ªü ƒë·∫ßu v√† ``` ·ªü cu·ªëi
                T·ª´ ƒë√≥ ph√¢n t√≠ch c√¢u sau (ch·ªâ c·∫ßn ƒë∆∞a k·∫øt qu·∫£ c·ªßa json kh√¥ng c·∫ßn gi·∫£i th√≠ch):\n'''
                
            text_area = st.text_area("Prompting cho Gemini",value=prompt)
            
            if st.button("B·∫Øt ƒë·∫ßu ƒë√°nh nh√£n"):
                # T√°ch c·ªôt nh√£n theo d·∫•u ,
                need_labels = need_labels.split(",")
                genai.configure(api_key=gemini_key)
                models = genai.GenerativeModel('gemini-1.5-flash')
                
                
                # Kh·ªüi t·∫°o data input ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu cho c√°c c·ªôt nh√£n
                text_input = [[] for _ in range(len(need_labels))]
                err = []
                experience = []
                industries = []
                languages = []
                framework = []
                soft_skill = []
                tools = []
                
                for ds in tqdm(df['requests']):
                    content = prompt + ds
                    i = 0
                    try:
                        response = models.generate_content(content).text.split("\n")
                        result_json = json.loads(''.join(response))
                        st.write(result_json)
                        
                        for result_key, result_value in result_json.items():
                            text_input[i].append(result_value)
                            i+=1
                            # experience.append(result['experience'])
                            # industries.append(";".join(result['industries']))
                            # languages.append(";".join(result['languages']))
                            # framework.append(";".join(result['framework']))
                            # soft_skill.append(";".join(result['soft-skill']))
                            # tools.append(";".join(result['tools']))
                    except Exception as e:
                        for i in range(len(need_labels)):
                            text_input[i].append("")
                        traceback.print_exc()
                        err.append(ds)
                    finally:
                        time.sleep(5)

                # K·∫øt th√∫c ch·∫°y Gemini
                new_assign_column = {}
                for i in range(len(need_labels)):
                    new_assign_column[f'{need_labels[i]}'] = text_input[i]
                df = df.assign(**new_assign_column)
                df.to_csv(f"{working_dir}\\data\\processed\\{file_process_name}.csv")
                
                st.session_state.clicked_labeld_btn = 2
        
        if st.session_state.clicked_labeld_btn == 2:
            st.success(f"Ho√†n th√†nh ƒë√°nh nh√£n, vui l√≤ng xem l·∫°i file trong th∆∞ m·ª•c: {working_dir}\\data\\processed")